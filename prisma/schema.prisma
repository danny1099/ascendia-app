generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  FACILITATOR
  PARTICIPANT
}

model User {
  id                   String    @id @default(cuid())
  email                String    @unique
  emailVerified        DateTime?
  password             String?
  name                 String?
  role                 UserRole? @default(ADMIN)
  image                String?
  stripeCustomerId     String?   @unique
  stripeSubscriptionId String?   @unique
  status               Boolean   @default(true)
  tenantId             String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  authenticator Authenticator[]
  tenant        Tenant?         @relation(fields: [tenantId], references: [id])

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verifications")
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}

// Tenants represent organizations or groups using the application
enum PlanType {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

model Tenant {
  id            String          @id
  name          String
  slug          String          @unique
  plan          PlanType        @default(FREE)
  status        String          @default("ACTIVE")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  Subscriptions Subscriptions[]
  User          User[]

  @@index([slug])
  @@map("tenants")
}

model Subscriptions {
  id           String    @id @default(cuid())
  tenantId     String
  plan         PlanType
  startDate    DateTime  @default(now())
  endDate      DateTime?
  amount       Float
  currency     String    @default("USD")
  billingCycle String    @default("MONTHLY")
  status       String    @default("ACTIVE")

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("subscriptions")
}
