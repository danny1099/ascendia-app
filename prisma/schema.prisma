generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  FACILITATOR
  PARTICIPANT
}

model User {
  id                   String    @id
  name                 String?
  email                String    @unique
  emailVerified        Boolean   @default(false)
  image                String?
  role                 UserRole? @default(ADMIN)
  stripeCustomerId     String?   @unique
  stripeSubscriptionId String?   @unique
  tenantId             String?
  status               String?   @default("ACTIVE")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @default(now()) @updatedAt

  sessions Session[]
  accounts Account[]

  @@map("users")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

// Tenants represent organizations or groups using the application
enum PlanType {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

model Tenant {
  id            String          @id
  name          String
  slug          String          @unique
  plan          PlanType        @default(FREE)
  status        String          @default("ACTIVE")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  Subscriptions Subscriptions[]

  @@index([slug])
  @@map("tenants")
}

model Subscriptions {
  id           String    @id @default(cuid())
  tenantId     String
  plan         PlanType
  startDate    DateTime  @default(now())
  endDate      DateTime?
  amount       Float
  currency     String    @default("USD")
  billingCycle String    @default("MONTHLY")
  status       String    @default("ACTIVE")

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("subscriptions")
}
